#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Jun  6 13:05:33 2025

@author: gamal
"""
import cartopy.feature as cfeature
import matplotlib.pyplot as plt
from matplotlib.colors import LinearSegmentedColormap
import numpy as np
import os
import pandas as pd
import cartopy.crs as ccrs
from gpm_storm.som.experiments import load_som
from gpm_storm.som.io import create_som_df_array
import xarray as xr
import glob
import pickle

def build_som_patch_array(df, som, zarr_directory, variable="precipRateNearSurface"):
    arr_df = create_som_df_array(som=som, df=df)
    arr_ds = np.empty(arr_df.shape, dtype=object)

    for row in range(arr_df.shape[0]):
        for col in range(arr_df.shape[1]):
            df_node = arr_df[row, col]
            if not len(df_node):
                continue
            sample = df_node.sample(1).iloc[0]
            _, patch_ds = find_zarr_file_for_patch(sample, zarr_directory)
            if patch_ds is not None:
                arr_ds[row, col] = patch_ds

    return arr_df, arr_ds

def find_zarr_file_for_patch(row, zarr_directory, filename_pattern="*.zarr"):
    granule_id, patch_id = str(row["gpm_granule_id"]), row["patch_id"]
    time = pd.to_datetime(row["time"])
    
    for offset in [0, -1]:
        t = time + pd.DateOffset(months=offset)
        path = os.path.join(zarr_directory, f"{t.year:04d}/{t.month:02d}", filename_pattern)
        for zarr_file in glob.glob(path):
            if granule_id in os.path.basename(zarr_file):
                ds = xr.open_zarr(zarr_file)
                if patch_id < ds.sizes["patch"]:
                    return zarr_file, ds.isel(patch=patch_id)
    print(f"No Zarr for granule_id {granule_id} at {time.strftime('%Y-%m')}")
    return None, None

def plot_houze_category_counts_per_node(arr_df, category, save_dir, fig=True):
    count_values = np.full((10, 10), np.nan)

    for row in range(10):
        for col in range(10):
            node_df = df_bmu[(df_bmu["row"] == row) & (df_bmu["col"] == col)]
            if not node_df.empty and category in node_df.columns:
                count_val = node_df[category].sum()
                count_values[row, col] = count_val/len(node_df)
    if fig:
        plt.figure(figsize=(8, 8))
        cmap = plt.cm.viridis
        masked_array = np.ma.masked_invalid(count_values)

        plt.imshow(masked_array, cmap=cmap, origin="upper")
        cbar = plt.colorbar()
        cbar.set_label(f"Count of {category}")
        plt.title(f"Count of {category} per SOM Node")
        plt.xlabel("SOM Column")
        plt.ylabel("SOM Row")
        plt.xticks(np.arange(10))
        plt.yticks(np.arange(10))
        plt.grid(False)

        save_path = os.path.join(save_dir, f"som_count_{category}.png")
        plt.savefig(save_path, dpi=300)
        plt.close()

    return count_values

def assign_season(dt):
    month = dt.month
    if month in [12, 1, 2]:
        return "DJF"
    elif month in [6, 7, 8]:
        return "JJA"
    else:
        return "Other"


som_name = "SOM_Pmean_>_1_with_random_init" 
som_dir = os.path.expanduser("~/gpm_storm/data/trained_soms/")  
res_dir = os.path.expanduser(f"~/gpm_storm/figs/{som_name}/0_Results") 
bmu_dir = os.path.expanduser(f"~/gpm_storm/data/df_with_bmus/{som_name}_with_bmus.parquet")
figs_dir = os.path.expanduser(f"~/gpm_storm/figs/{som_name}")
zarr_dir = "/ltenas2/data/GPM_STORM_DB/zarr"
flag_path = os.path.join(res_dir, "houze_flags.parquet")
df_bmu = pd.read_parquet(bmu_dir)
houze_df = pd.read_parquet(flag_path)
df_bmu = pd.concat([df_bmu, houze_df], axis=1)



with open(os.path.join(res_dir,"wcc_flagss.pkl"), 'rb') as f:
    wcc_flags = pickle.load(f)
    
wcc_flat_list = []
for (row, col), flag_list in wcc_flags.items():
    for flag_dict in flag_list:
        flag_dict["row"] = row
        flag_dict["col"] = col
        wcc_flat_list.append(flag_dict)

df_wcc = pd.DataFrame(wcc_flat_list).set_index("index").sort_index()
df_bmu = df_bmu.join(df_wcc[["wcc_moderate", "wcc_strong"]],how="left")
df_bmu["wcc_moderate"] = df_bmu["wcc_moderate"].astype(bool)
df_bmu["wcc_strong"] = df_bmu["wcc_strong"].astype(bool)
df_bmu["season"] = df_bmu["time"].apply(assign_season)    
# --- Load ---

som = load_som(som_dir=som_dir, som_name=som_name)
n_rows = som._n_rows
n_cols = som._n_columns
arr_df, arr_ds = build_som_patch_array(df_bmu, som, zarr_dir)

houze_categories = [
    "ISE", "DCC_moderate", "DCC_strong",
    "BSR_moderate", "BSR_strong", "hail_flag_30",
    "hail_flag_40", "hail_flag_50", 
    "wcc_moderate", "wcc_strong"
]
seasons = ["DJF", "JJA"]

counts_per_node = (df_bmu
    .groupby(["row", "col"])[houze_categories]
    .sum()
    .astype(int)  
    .reset_index()
    )

# Color Map
colors = [
    (1.0, 1.0, 1.0),     # white
    (0.29, 0.4, 0.7),    # light blue
    (0.25, 0.5, 0.76),   # medium blue
    (0.01, 0.84, 0.93),  # cyan
    (0.77, 0.84, 0.05),  # yellow-green
    (1.0, 0.92, 0.0),    # yellow
    (1.0, 0.44, 0.0),    # orange
    (1.0, 0.0, 0.0),     # red
    (0.56, 0.0, 0.0)     # dark red
]
cmap = LinearSegmentedColormap.from_list("white_blue_yellow_red", colors, N=256)
# cmap.set_bad("white")


# Binned maps
lat_bins = np.arange(-90, 91, 1.5)  
lon_bins = np.arange(-180, 181, 1.5)  
df_bmu["lat_bin"] = np.digitize(df_bmu["lat"], bins=lat_bins) - 1
df_bmu["lon_bin"] = np.digitize(df_bmu["lon"], bins=lon_bins) - 1
agg_df = df_bmu.groupby(["season","lat_bin", "lon_bin"])[houze_categories].sum(numeric_only=True).reset_index()
agg_df["lat"] = lat_bins[agg_df["lat_bin"]]
agg_df["lon"] = lon_bins[agg_df["lon_bin"]]

for var in houze_categories:
    for s in seasons:
        heatmap = np.full((len(lat_bins)-1, len(lon_bins)-1), np.nan) 
        agg_df_season = agg_df[agg_df["season"]==s]
        for _, row in agg_df_season.iterrows():
            lat_idx = np.searchsorted(lat_bins, row["lat"], side="right") - 1
            lon_idx = np.searchsorted(lon_bins, row["lon"], side="right") - 1
            if 0 <= lat_idx < heatmap.shape[0] and 0 <= lon_idx < heatmap.shape[1]:
                heatmap[lat_idx, lon_idx] = row[var]
    
        fig, ax = plt.subplots(figsize=(13, 5), subplot_kw={"projection": ccrs.PlateCarree()})
        ax.set_extent([-180, 180, -90, 90], crs=ccrs.PlateCarree())
        ax.add_feature(cfeature.COASTLINE, linewidth=0.8)
        ax.add_feature(cfeature.BORDERS, linestyle=":")
        mesh = ax.pcolormesh(lon_bins, lat_bins, heatmap, cmap=cmap, transform=ccrs.PlateCarree())
        cbar = plt.colorbar(mesh, ax=ax, orientation="vertical", pad=0.02, shrink=0.8)
        cbar.set_label(f"{var}")
        ax.set_title(f"(c) {var} (moderate thresholds)", fontsize=12)
        ax.set_xticks(np.arange(-180, 181, 45), crs=ccrs.PlateCarree())
        ax.set_yticks(np.arange(-30, 31, 10), crs=ccrs.PlateCarree())
        ax.tick_params(labelsize=10)
        plt.title(f"Global Distribution of {var} (2°x2° bins) {s}")
        plt.tight_layout()
        plt.show()
    


for cat in houze_categories:
    plot_houze_category_counts_per_node(arr_df, cat, figs_dir)
    
    





